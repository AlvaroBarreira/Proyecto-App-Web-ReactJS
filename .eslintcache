[{"C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\index.js":"1","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\App.js":"2","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\Menu.js":"3","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\List.js":"4","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\Search.js":"5","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\Item.js":"6","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\PanelAdd.js":"7"},{"size":168,"mtime":1579465748000,"results":"8","hashOfConfig":"9"},{"size":4905,"mtime":1609891404423,"results":"10","hashOfConfig":"9"},{"size":2092,"mtime":1609883544407,"results":"11","hashOfConfig":"9"},{"size":560,"mtime":1579465748000,"results":"12","hashOfConfig":"9"},{"size":591,"mtime":1609881102966,"results":"13","hashOfConfig":"9"},{"size":3072,"mtime":1609886518000,"results":"14","hashOfConfig":"9"},{"size":3012,"mtime":1609883491211,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1t4hxqq",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\index.js",[],["36","37"],"C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\App.js",["38"],"import React from 'react';\nimport './App.css';\nimport Menu from './Menu';\nimport List from './List';\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      comics:[\n            {id:0, rating:4, title: 'The Walking Dead #01', image: 'image01.jpg'},\n            {id:1, rating:3, title: 'The Walking Dead *Michonne Especial*', image:'image02.jpg'},\n            {id:2, rating:4, title: 'The Walking Dead *Here´s Negan*', image:'image03.jpg'},\n            {id:3, rating:5, title: 'Marvel The Infinity Gauntlet', image:'image04.jpg'},\n            {id:4, rating:4, title: 'Marvel X-men', image:'image06.jpg'},\n            {id:5, rating:5, title: 'Zed League of Legends', image:'image07.jpg'},\n            {id:6, rating:4, title: 'Lux League of Legends', image:'image08.jpg'},\n            {id:7, rating:3, title: 'Pestilence #01', image:'image09.jpg'},\n          ],\n          /*Para hacer la busqueda de comics vamos a hacer una copia de mi arreglo inicial*/\n      copyComics: []\n    };\n\n    this.onSearch = this.onSearch.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.remove = this.remove.bind(this);\n    this.updateRating = this.updateRating.bind(this);\n  }\n\n    //Esta es la funcion que me va a servir para llenar la copia de mis comics\n  initComics(){\n\n    /*Este state es diferente al que estamos utilizando abajo, porque generalmente setState es una operacion asincrona, quiere decir que no te garantiza que despues de ejecutarla puedas seguir utilizando el state conforme a la operacion que ese encuentra dentro de este estado*/\n    this.setState((state,props) => ({\n\n      /*Entonces aca decimos que cada vez que se ejecute initComics, setState se va a actualizar a que copyComics va a ser una copia de el arreglo de comics original */\n      copyComics: [...state.comics]\n    }));\n  }\n\n  componentDidMount(){\n    this.initComics();\n  }\n  /*Para esta funcion necesitamos un query*/\n  onSearch(query){\n\n    //Lo primero que hacemos es validar que el query este vacio, si este vacio lo unico que va a hacer es regresarmelos al estado inicial, como si no hubiesemos hecho ningun cambio \n    if(query === ''){\n      this.setState({copyComics: [...this.state.comics]});\n\n      //Si el query contiene texto, voy a crear un arreglo temporal de mis comics\n    }else{\n\n      const temp = [...this.state.comics];\n      var res = [];  \n\n      /*Despues voy a meter un forEach porque quiero recorrer cada elemento*/\n      temp.forEach(item =>{\n\n        //Pregunto si el titulo del elemento que lo transformo a minisculas es mayor de -1 cuando aplico un indexOf(que me va a buscar la coincidencia), entonecs ese resultado lo voy a añadir a mi arreglo de res que cree arriba, como esta en un forEach lo va a hacer para todos los elementos \n        if(item.title.toLowerCase().indexOf(query) > -1){\n          res.push(item);\n        }\n      });\n      \n      //Cuando termine de ejecutarse el forEach voy a actualizar el estado de copyComics que es el que voy a manipular, para que tenga el resultado de res, es decir el arreglo que va a tener los resultados filtrados de acuerdo al query que le estamos colocando y lo copiamos para que sea igual que copyComics\n      this.setState({copyComics: [...res]});\n    }\n  }\n\n  addItem(item){\n\n    /*Aca voy a recibir toda la informacion*/\n\n    /*Cuando corramos este metodo, creamos un arreglo temporal, copiamos el arreglo*/\n    var temp = [...this.state.comics];\n    //Necesito sacar el ultimo id que tiene mi arreglo, \"temp.length-1\" para que me de el indice del ultimo elemento y de ese voy a sacar el id, ya teniendo el id voy a sumarle 1, en este caso el actual seria 4 y el siguiente que voy a agregar sera 5\n    const id = temp[temp.length-1].id + 1;\n\n    /*A item le voy a crear la propiedad de id y le voy a asignar el id que acabo de crear*/\n    item['id'] = id;\n\n    //por ultimo en temp voy a hacer un push para insertar todo el elemento\n    temp.push(item);\n\n    //Al final lo regresamos al state, le hago una copia al temp para que se actualizen mis comics\n    this.setState({comics: [...temp]});\n    this.initComics();\n  }\n\n  remove(id){\n    var temp = [...this.state.comics];\n    const res = temp.filter(item => item.id != id);\n    this.setState({comics: [...res]});\n    this.initComics();\n  }\n\n  updateRating(item){\n    var temp = [...this.state.comics];\n    const index = temp.findIndex(x => x.id === item.id);\n    temp[index].title = item.title;\n    temp[index].image = item.image;\n    temp[index].rating = item.rating;\n\n    this.setState({comics: [...temp]});\n    this.initComics();\n  }\n\n  render(){\n    return (\n      <div className=\"app\">\n        <Menu title=\"ComicDB\" onsearch={this.onSearch} onadd={this.addItem} />\n        <List className=\"list\" items={this.state.copyComics} onremove={this.remove} onupdaterating={this.updateRating} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\Menu.js",["39"],"import React, { Fragment } from 'react';\nimport './Menu.css';\nimport Search from './Search';\nimport PanelAdd from './PanelAdd';\n\nclass Menu extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        /*Como necesito que se muestre un panel voy a tener que manejar mi state, voy a crear en mi state una variable que se llame newItemPanel*/\n\n        this.state = {newItemPanel: false};\n        //Va a tener un valor booleano, porque necesito que cuando este oculto este en false, y que cuando le haga click con el evento cambie su valor a true\n\n        /*Necesitamos bindear nuestro add con la clase, esto se hace para cada metodo que utilice o este basado en eventos*/\n        this.add = this.add.bind(this);\n\n        /*Esto va a evitar que se actualize mi pagina cuando le demos cancelar al boton del panel*/\n        this.onCancel = this.onCancel.bind(this);\n    }\n    /*Esta es la funcion que me va a servir para mostrar el panel que va a añadir un nuevo elemento o un nuevo comic. */\n    add(){\n     this.setState({newItemPanel: true});   \n    }\n\n    /*Para el caso contrario, esta funcion me va a permitir ocultar el panel*/\n    onCancel(){\n\n        /*Le agrego un preventDefault para que no me ejecute cualquier evento que viene por defecto*/\n        this.setState({newItemPanel: false});   \n    }\n\n\n    render(){\n        return(\n            <div className=\"container\">\n                <div className=\"subcontainer\">\n                    <div className=\"logo\">{this.props.title}</div>\n                    <div className=\"search\">\n                        <Search onsearch={this.props.onsearch} />\n                    </div>\n                    <div className=\"actions\">\n                        <button onClick={this.add} className=\"button btn-blue\">Agregar nuevo Comic</button>\n                    </div>\n                </div>\n                {(this.state.newItemPanel)?\n                 <PanelAdd onhide={this.onCancel} onadd={this.props.onadd} />\n                 : \n                 ''\n                 }\n            </div>\n        );\n    }\n}\n\nexport default Menu;","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\List.js",[],"C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\Search.js",["40"],"import React from 'react';\n\nclass Search extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.onChangeEvent = this.onChangeEvent.bind(this);\n    }\n\n    onChangeEvent(e){\n        //Voy a crear mi query, lo convierto en string y lo paso a minisculas\n\n        const query = e.target.value.toString().toLowerCase();\n\n        //Mando a llamar al prop de mi componente padre \n        this.props.onsearch(e.target.value);\n    }\n\n    render(){\n        return(\n            <input type=\"text\" onChange={this.onChangeEvent} />\n        );\n    }\n}\n\nexport default Search;","C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\Item.js",["41","42"],"import React from 'react';\nimport './Item.css';\n\n/*Debo cambiar mi function item a una clase, porque necesito utilizar el state para poder mostrar la informacion, para hacer el recorrido de mi rating, y mostrar el numero de estrellas que tiene, necesito un estado que me diga cuantos elementos son */\n\n/*function Item(props){*/\nclass Item extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            title: '',\n            image: '',\n            rating: 1,\n\n            /*Voy a decirle que me cree un arreglo que tenga el numero de elementos que tiene las estrellas y que lo rellene con un 1 o un 0*/\n            stars: []\n        }\n\n        this.onremove = this.onremove.bind(this);\n        this.onChangeRating = this.onChangeRating.bind(this);\n    }\n    /*Dentro de esta funcion voy a modificar el estado*/\n    componentDidMount(){\n        this.setState({\n            id: this.props.id,\n            title: this.props.title,\n            image: this.props.image, \n            rating: parseInt(this.props.rating),\n            stars: Array(parseInt(this.props.rating)).fill(1)/*parseInt para transformar el rating, si mi rating tiene 4 estrellas, voy a crear un arreglo de 4 espacios llenados con el valor 0*/\n        });\n    }\n\n    onremove(e){\n        console.log(this.props.id);\n        this.props.onremove(this.props.id);\n    }\n\n    //Aca lo que hago es que cada vez que cambie el rating se actualize mi estado \n    onChangeRating(e){\n        const rating = parseInt(e.target.value)\n        this.setState({\n            //Le extraigo el valor a mi variable de rating\n            rating: parseInt(e.target.value),\n            stars: Array(parseInt(e.target.value)).fill(1)\n        });\n\n        this.props.onupdaterating({id: this.state.id, title: this.state.title, image: this.state.image, rating: rating});\n    }\n\n    render(){\n        return(\n            <div className=\"item\">\n                <div className=\"image\"><img src={'img/' + this.state.image} width=\"100%\"  /></div>\n                <div className=\"title\">{this.state.title}</div>\n                <div className=\"rating\">\n                    <p>\n                    {/*Aca lo unico que hago es mapear cada uno de esos espacios para que por cada espacio cree una estrella */this.state.stars.map(x =>\n                        <img src='img/star.png' width='32' />\n                    )}\n                    </p>\n                    Calificación: \n                    <select value={this.state.rating} onChange={this.onChangeRating}>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                    </select>\n                </div>\n                <div className=\"actions\">\n                    <button className=\"active\" onClick={this.onremove}>Eliminar</button>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Item;",["43","44"],"C:\\Users\\Alvaaa\\Desktop\\Proyectos-Responsive\\Proyecto-App-Web-React-JS\\src\\PanelAdd.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":94,"column":45,"nodeType":"51","messageId":"52","endLine":94,"endColumn":47},{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"57","line":14,"column":15,"nodeType":"55","messageId":"56","endLine":14,"endColumn":20},{"ruleId":"58","severity":1,"message":"59","line":55,"column":40,"nodeType":"60","endLine":55,"endColumn":93},{"ruleId":"58","severity":1,"message":"59","line":60,"column":25,"nodeType":"60","endLine":60,"endColumn":62},{"ruleId":"45","replacedBy":"61"},{"ruleId":"47","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'query' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["63"],["64"],"no-global-assign","no-unsafe-negation"]